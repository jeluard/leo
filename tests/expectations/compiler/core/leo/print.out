namespace = "Compile"
expectation = "Pass"
outputs = [[{ compile = [{ initial_symbol_table = "229b300ba1fb667bae780df6c1e598af6c586a517fccee78a298fe63169448c7", type_checked_symbol_table = "3509730a3436802986c9c51de34562f1250665946ebc27403b75c9ca166b11bd", unrolled_symbol_table = "3509730a3436802986c9c51de34562f1250665946ebc27403b75c9ca166b11bd", initial_ast = "1d07f32afe49f5767c17e17932366aa6f25c06c4cf2b4b378a8e3bfd554b0233", unrolled_ast = "1d07f32afe49f5767c17e17932366aa6f25c06c4cf2b4b378a8e3bfd554b0233", ssa_ast = "c59311821bcbe4c39d3a3212549a779f3474cabb1999ea3c7d6973bd707a79d8", flattened_ast = "d29b344113b98c0c4e926ee6e45c9013882f4b4f54fbd553b89aebd19e9cf7c2", destructured_ast = "b63764b1d65e26c8e89f594b874ad6d04f8103415f3d85cf82cda4176d652b44", inlined_ast = "b63764b1d65e26c8e89f594b874ad6d04f8103415f3d85cf82cda4176d652b44", dce_ast = "b63764b1d65e26c8e89f594b874ad6d04f8103415f3d85cf82cda4176d652b44", bytecode = """
program test.aleo;

function main:
    input r0 as u32.private;
    input r1 as u32.private;
    add r0 r1 into r2;
    print r2;
    output r2 as u32.private;
""", errors = "", warnings = "" }] }]]
